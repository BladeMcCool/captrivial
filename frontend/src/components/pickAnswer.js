import React, {useContext} from 'react';
import { AppContext } from '../App';

const PickAnswer = ({ questions, score, lobbySession, playerSession, setScore, setError, setLoading, setNoPointsAwarded, setCurrentQuestionAnswered }) => {
    const { API_BASE } = useContext(AppContext);

    const submitAnswer = async (index) => {
        // We are submitting the index
        setLoading(true);
        console.log("saying we answered the current question now")
        setCurrentQuestionAnswered(true);
        const currentQuestion = questions[questions.length-1];
        console.log("believes current question id is: ", currentQuestion.id)
        try {
            const res = await fetch(`${API_BASE}/game/answer`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    lobbyId: lobbySession,
                    sessionId: playerSession,
                    questionId: currentQuestion.id, // field name is "id", not "questionId"
                    answer: index,
                }),
            });
            const data = await res.json();
            console.log("got this back from submit answer:", data)
            if (res.ok) {
                if (data.points) {
                    //TODO points will tell us if we got the question right or not ... do something fancy if so
                    setScore(data.score); // Update score from server's response
                } else {
                    //we didnt get points so we must have answered it wrong.
                    //in theory its possible we raced to submit the correct answer but werent processed first by the server
                    //it might be a little cleaner to include whether the answer was correct or not in the server response as opposed to just whether points were awarded
                    //but this should be good enough for now.
                    setNoPointsAwarded(true)
                }
            } else {
                throw new Error("non-ok response from error");
            }
        } catch (err) {
            setCurrentQuestionAnswered(false); // for good measure if we failed to submit. trying to manage state around being able to show the 'wrong answer' screen but not sure the best way to deal with the racy nature of some of the communications that is happening (eg getting and handling a new question which was generated by submitting an answer, before actually handling the server response from submitting the answer!)
            setError("Failed to submit answer. " + err.message);
        }
        setLoading(false);
    };

    return (
        <div>
            {/* Game session UI */}
            <h3>{questions[questions.length - 1]?.questionText}</h3>
            {questions[questions.length - 1]?.options.map((option, index) => (
                <button key={index} onClick={() => submitAnswer(index)} className="option-button">
                    {option}
                </button>
            ))}
            <p className="score">Score: {score}</p>
        </div>
    );
};

export default PickAnswer;